---
prev: pattern-matching-and-functional-composition.textile
next: advanced-types.textile
title: Tip & polimorfizm temelleri
layout: post
---

Bu ders şunları kapsar:

* "Durağan(static) tipler nelerdir?":#background
* "Scala'da Tipler":#scala
* "Parametrik Polimorfizm":#parametricpoly
* "Tip çıkarsama: Hindley-Milner vs. yerel tip çıkarsama":#inference
* "Varyans":#variance
* "Sınırlar":#bounds
* "Quantification":#quantification

h2(#background). Durağan tipler nedir?  Neden faydalıdır?

Pierce'a göre : "Bir tip sistemi hesapladığı değerlerin türlerine göre program aşamalarını sınıflandırarak belirli hatalı davranışarın varlığını otomatik kontrol eden bir sözdizimsel metottur."

Tipler fonksiyon domain(bir fonksiyonun alabileceği değerler) & codomain(bir fonksiyondan dönebilecek değerler) belirtmenize izin verir. Örnek olarak şunu matematikten görmeye alışkınız:

<pre>
f: R -> N
</pre>

Bu bize fonksiyon "f" 'in reel sayılar kümesindeki değerleri doğal sayısındaki değerlere eşlediğini söyler.

Kuramsal olarak, bu tam olarak _concrete_ tiplerdir. Tip sistemleri bu kümeleri ifade etmek için bazı daha güçlü yollar sunar.

Verilen bu ek açıklamalarla, derleyici _durağan olarak_ (derleme zamanında) programın _sağlam_ olduğunu doğrulayabilir. Diğer bir deyişle, değerler (çalışma zamanında) programın getirdiği kısıtlamalara uymazsa derleme başarısız olur.

Genel olarak konuşursak, typechecker yalnızca _sağlam olmayan_ programların derlemediğini garanti edebilir. Her sağlam programın derleyeceğini _garanti edemez_.

Tip sistemlerindeki artan açıklayıcılıkla, daha güvenilir kodlar üretebiliriz çünkü programımız hakkında değişmeyenleri bile çalışmadan önce kanıtlamamıza izin verir. Akademi, değere bağlı tipler de dahil olmak üzere açıklayıcılığını sınırlarını çok zorluyor.

Tüm tip bilgilerinin derleme zamanında kaldırıldığını unutmayın. Artık gerekli değildir. Buna silme(erasure) denir.

h2(#scala). Scala'da Tipler

Scala'nın güçlü tip sistemi çok zengin ifadelere izin verir. Bazı ana özellikleri:

* *parametrik polymorfizm* roughly, generic programming
* *(yerel) tip çıkarsama* roughly, why you needn't say <code>val i: Int = 12: Int</code>
* *existential quantification* roughly, defining something _for some_ unnamed type
* *views* we'll learn these next week; roughly, "castability" of values of one type to another

h2(#parametricpoly). Parametrik polimorfizm

Polimorfizm durağan tiplerin zenginiliğinden taviz vermeden genel kod(farklı tipteki değeler için) yazmak için kullanılır.

Örnek olarak, parametrik polimorfizm olmadan, bir genel list veri yapısı her zaman şöyle görünürdü (and indeed it did look like this in Java prior to generics):

<pre>
scala> 2 :: 1 :: "bar" :: "foo" :: Nil
res5: List[Any] = List(2, 1, bar, foo)
</pre>

Böyle olduğunda bireysel üyelerin tip bilgisini getiremeyiz.

<pre>
scala> res5.head
res6: Any = 2
</pre>

Ve böylece uygulamamız bir dizi dönüşüme ("asInstanceOf[]")) mağruz kalacak ve tip güvenliğinden yoksun olacağız (çünkü hepsi dinamik).

Polimorfizm _tip değişkenlerini_ belirterek elde edilir.

<pre>
scala> def drop1[A](l: List[A]) = l.tail
drop1: [A](l: List[A])List[A]

scala> drop1(List(1,2,3))
res1: List[Int] = List(2, 3)
</pre>

h3. Scala rank-1 polimorfizme sahip

Kabaca, bu Scala'da ifade etmek istediğiniz derleyicinin anlayamayacağı kadar "çok genel" bazı tip kavramlarının olduğunu anlamına gelir. Diyelim ki şöyle bir fonskiyonunuz var:

<pre>
def toList[A](a: A) = List(a)
</pre>

bunu genel olarak kullanmak istediniz:

<pre>
def foo[A, B](f: A => List[A], b: B) = f(b)
</pre>

Bu derlenmez, çünkü tip değişkenlerinin başlatma yerinde sabitlenmesi gerekir.Tip <code>B</code> garantiye alınsa bile, 

<pre>
def foo[A](f: A => List[A], i: Int) = f(i)
</pre>

...tip uyumsuzluğu hatası alırsınız.

h2(#inference). Tip çıkarsaması

Durağan tiplemeye(static typing) genel itiraz sözdizimsel ek yük doğurduğu yönündedir. Scala bunu _tip çıkarsaması(type inference)_ sağlayarak hafifletir.

Fonksiyonel programlama dillerinde tip çıkarsama(type inference) için klasik metot _Hindle-Milner_'dır. ve ilk olarak ML(Makine Öğremimi)'nde kullanılmıştır.

Scala'nın tip çıkarsama sistemi biraz farklı çalışır, fakat özünde benzerdir: kısıtlamaları çıkarsa, ve bir tipi birleştirmeye çalış.

Örnek olarak Scala'da şunu yapamazsınız:

<pre>
scala> { x => x }
<console>:7: error: missing parameter type
       { x => x }
</pre>

Oysaki OCaml dilinde şunu yapabilirsiniz:

<pre>
# fun x -> x;;
- : 'a -> 'a = <fun>
</pre>

Scala'da tüm tip çıkarsaması _yerel(local)_'dir. Scala bir seferde ifadeyi değerlendirir. Örnek olarak: 

<pre>
scala> def id[T](x: T) = x
id: [T](x: T)T

scala> val x = id(322)
x: Int = 322

scala> val x = id("hey")
x: java.lang.String = hey

scala> val x = id(Array(1,2,3,4))
x: Array[Int] = Array(1, 2, 3, 4)
</pre>

Tipler şimdi kourunur, Scala derleyicisi tip parametresini bizim için çıkarsar. Ayrıca dönüş tipini ayrıca belirtmek zorunda olmadığımızı da unutmayın.

h2(#variance). Varyans(Variance)

Scala'nın tip sistemi polimorfizmle birlikte sınıf hiyerarşisini hesaba katmak zorundadır. Sınıf hiyerarşileri alt tip ilişki ifadelerine izin verir.  OO(Object Oriented)'yu poliformizmle karıştırırken ortaya çıkan temel soru şudur:  eğer <tt>T'</tt> <tt>T</tt>'nin alt sınıfıysa, <tt>Container[T']</tt> <tt>Container[T]</tt>'nin alt sınıfı olarak mı kabul edilir? Varyans açıkalamaları sınıf hiyerarşileri ve polimorfik tipler arasında aşağıdaki ilişkileri ifade etmemizi sağlar:

|                |*Meaning*                     | *Scala notation*|
|*covariant*     |C[T'] is a subclass of C[T]   | [+T]|
|*contravariant* |C[T] is a subclass of C[T']   | [-T]|
|*invariant*     |C[T] and C[T'] are not related| [T]|

Alt tip ilişkisi şu anlama gelir: verilen bir T tipi için, eğer T' bir alt tip ise, yerine geçirebilir misiniz?

<pre>
scala> class Covariant[+A]
defined class Covariant

scala> val cv: Covariant[AnyRef] = new Covariant[String]
cv: Covariant[AnyRef] = Covariant@4035acf6

scala> val cv: Covariant[String] = new Covariant[AnyRef]
<console>:6: error: type mismatch;
 found   : Covariant[AnyRef]
 required: Covariant[String]
       val cv: Covariant[String] = new Covariant[AnyRef]
                                   ^
</pre>

<pre>
scala> class Contravariant[-A]
defined class Contravariant

scala> val cv: Contravariant[String] = new Contravariant[AnyRef]
cv: Contravariant[AnyRef] = Contravariant@49fa7ba

scala> val fail: Contravariant[AnyRef] = new Contravariant[String]
<console>:6: error: type mismatch;
 found   : Contravariant[String]
 required: Contravariant[AnyRef]
       val fail: Contravariant[AnyRef] = new Contravariant[String]
                                     ^
</pre>

Kontravaryans(Contravariance) biraz garip gözüküyor. Ne zaman kullanılır? Biraz şaşırtıcı!

<pre>
trait Function1 [-T1, +R] extends AnyRef
</pre>

Eğer bunu yerine geçme(substitution) bakış açısından düşünürseniz, çok mantıklı gelir. İlk önce basit bir sınıf hiyerarşisi tanımlayalım:

<pre>
scala> class Animal { val sound = "rustle" }
defined class Animal

scala> class Bird extends Animal { override val sound = "call" }
defined class Bird

scala> class Chicken extends Bird { override val sound = "cluck" }
defined class Chicken
</pre>

<code>Bird</code> sınıfını parametre olarak alan bir fonksiyona ihtiyacınız olduğunu varsayalım:

<pre>
scala> val getTweet: (Bird => String) = // TODO
</pre>

Standart Animal kütüphanesi istediğinizi yapan bir fonksiyona sahip, fakat bu <code>Animal</code> parametresi alır. Çoğu durumda “___ 'ye ihtiyacım var, ___' nın bir alt sınıfına sahibim” derseniz, sorun yoktur. Fakat fonksiyon parametreleri kontravaryanttır. Eğer <code>Bird</code> parametresi alan bir fonksiyona ihtiyacınız varsa ve <code>Chicken</code> alan bir fonksiyonunuz varsa, bu fonksiyon <code>Duck</code> geldiğinde boğulur. Fakat fonksiyonun <code>Animal</code> almasında bir sorun yoktur:

<pre>
scala> val getTweet: (Bird => String) = ((a: Animal) => a.sound )
getTweet: Bird => String = <function1>
</pre>

Bir fonksiyonun dönüş değer tipi kovaryanttır. Eğer <code>Bird</code> dönen bir fonksiyona ihtiyacınız varsa fakat fonksiyon <code>Chicken</code> dönüyorsa, bu harika.

<pre>
scala> val hatch: (() => Bird) = (() => new Chicken )
hatch: () => Bird = <function0>
</pre>

h2(#bounds). Sınırlar(Bounds)

Scala polimorfik değişkenleri _sınırlar(bounds)_ kullanarak sınırlamaya izin verir. Sınırlar alt tip ilişkilerini ifade eder.

<pre>
scala> def cacophony[T](things: Seq[T]) = things map (_.sound)
<console>:7: error: value sound is not a member of type parameter T
       def cacophony[T](things: Seq[T]) = things map (_.sound)
                                                        ^

scala> def biophony[T <: Animal](things: Seq[T]) = things map (_.sound)
biophony: [T <: Animal](things: Seq[T])Seq[java.lang.String]

scala> biophony(Seq(new Chicken, new Bird))
res5: Seq[java.lang.String] = List(cluck, call)
</pre>

Düşük tip sınırlar da desteklenir; kontravaryans ve zekice kovaryans ile kullanışlı olurlar. <code>List[+T]</code> kovaryanttır; bir Birds listesi bir Animals listesidir. <code>List</code> önüne <code>elem</code> eklenmiş yeni bir <code>List</code> dönen bir operatör tanımlar <code>::(elem T)</code>. Yeni <code>List</code> orijinaliyle aynı tiptedir.

<pre>
scala> val flock = List(new Bird, new Bird)
flock: List[Bird] = List(Bird@7e1ec70e, Bird@169ea8d2)

scala> new Chicken :: flock
res53: List[Bird] = List(Chicken@56fbda05, Bird@7e1ec70e, Bird@169ea8d2)
</pre>

_Ayrıca_ <code>List</code> <code>List[B]</code> dönen  <code>::[B >: T](x: B)</code> tanımlar. <code>B >: T</code> dikkat edin. <code>B</code> tipini <code>T</code>'nin üst sınıfı olarak belirtir. Bu bize <code>List[Bird]</code> başına <code>Animal</code> eklerken doğru şeyi yapmamıza izin verir:

<pre>
scala> new Animal :: flock
res59: List[Animal] = List(Animal@11f8d3a8, Bird@7e1ec70e, Bird@169ea8d2)
</pre>

Dönüş tipinin <code>List[Animal]</code> olduğuna dikkat edin.

h2(#quantification). Niceleme(Quantification)

Bazı tip değişkenlerini isimlendirmeyi umursamazsınız, örnek olarak:

<pre>
scala> def count[A](l: List[A]) = l.size
count: [A](List[A])Int
</pre>

Bunun yerine "genelgeçerler" kullanabilirsiniz:

<pre>
scala> def count(l: List[_]) = l.size
count: (List[_])Int
</pre>

Bu şunun kısaltmasıdır:

<pre>
scala> def count(l: List[T forSome { type T }]) = l.size
count: (List[T forSome { type T }])Int
</pre>

Nicelemenin zorlayıcı olabileceğini unutmayın:

<pre>
scala> def drop1(l: List[_]) = l.tail
drop1: (List[_])List[Any]
</pre>

Birden tip bilgisini kaybettik! Neler olduğunu görmek için, zorlayıcı sözdizimine geri dönebiliriz:

<pre>
scala> def drop1(l: List[T forSome { type T }]) = l.tail
drop1: (List[T forSome { type T }])List[T forSome { type T }]
</pre>

T hakkında bir şey söyleyemeyiz, çünkü tipi buna izin vermiyor.

Ayrıca genelgeçer tip değişkenleri için de sınırlar uygulayabilirsiniz:

<pre>
scala> def hashcodes(l: Seq[_ <: AnyRef]) = l map (_.hashCode)
hashcodes: (Seq[_ <: AnyRef])Seq[Int]

scala> hashcodes(Seq(1,2,3))
<console>:7: error: type mismatch;
 found   : Int(1)
 required: AnyRef
Note: primitive types are not implicitly converted to AnyRef.
You can safely force boxing by casting x.asInstanceOf[AnyRef].
       hashcodes(Seq(1,2,3))
                     ^

scala> hashcodes(Seq("one", "two", "three"))
res1: Seq[Int] = List(110182, 115276, 110339486)
</pre>

*Ayrıca bkz* <a href="https://www.drmaciver.com/2008/03/existential-types-in-scala/">D. R. MacIver ile Scala'da varoluşsal tipler</a>
